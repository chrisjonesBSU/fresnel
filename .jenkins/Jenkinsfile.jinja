pipeline
    {
    options { skipDefaultCheckout() }
    agent none

    stages
        {
        stage('Unit and validation tests')
            {
            when { not { branch 'release' } }

            parallel
                {
                {% for test in tests %}stage('{{ test.name }}')
                    {
                    agent { label '{{ test.agent }}' }

                    environment
                        {
                        CC = '{{ test.CC }}'
                        CXX = '{{ test.CXX }}'
                        CONTAINER = '/nfs/turbo/glotzer/containers/ci/{{ test.CONTAINER }}'
                        }

                    steps
                        {
                        sh 'echo ${NODE_NAME}'

                        dir('code')
                            {
                            checkout scm
                            sh 'git submodule update --init'
                            }

                        dir('build')
                            {
                            timeout(time: 1, unit: 'HOURS')
                                {
                                sh '''
                                    singularity exec --nv ${CONTAINER} cmake ../code -DPYTHON_EXECUTABLE=/usr/bin/python{{ test.PYVER }} -DENABLE_EMBREE={{ test.ENABLE_EMBREE }} -DENABLE_OPTIX={{ test.ENABLE_OPTIX }} -GNinja
                                   '''

                                sh 'singularity exec --nv ${CONTAINER} ninja -j 3'
                                }
                            }

                        dir('code/test')
                            {
                            timeout(time: {{ test.timeout }}, unit: 'HOURS')
                                {
                                sh '''
                                    export PYTHONPATH=${WORKSPACE}/build
                                    singularity exec --nv ${CONTAINER} /usr/bin/python{{ test.PYVER }} -m pytest --junit-xml=${WORKSPACE}/test.xml
                                   '''
                                }
                            }

                        junit 'test.xml'
                        }
                    post
                        {
                        always
                            {
                            archive 'test.xml'
                            deleteDir()
                            }
                        }
                    }
                {% endfor %}
                }
            }
        }
    }
